package com.example.first_project;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

import com.example.first_project.model.Message;

import java.util.ArrayList;
import java.util.List;

public class MessageAdapterTest {

    private List<Message> testMessages;
    private com.example.first_project.adapter.MessageAdapter adapter;

    @Before
    public void setUp() {
        testMessages = new ArrayList<>();
        adapter = new com.example.first_project.adapter.MessageAdapter(testMessages);
    }

    @Test
    public void getItemCount_EmptyList_ReturnsZero() {
        assertEquals(0, adapter.getItemCount());
    }

    @Test
    public void getItemCount_WithMessages_ReturnsCorrectCount() {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–ø–∏—Å–æ–∫
        testMessages.add(new Message("User1", "Message 1"));
        testMessages.add(new Message("User2", "Message 2"));
        testMessages.add(new Message("User3", "Message 3"));
        
        int count = adapter.getItemCount();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assertEquals(3, count);
    }

    @Test
    public void addMessage_AddsMessageToList() {
        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∞–¥–∞–ø—Ç–µ—Ä
        Message newMessage = new Message("TestUser", "Test message");
        int initialCount = adapter.getItemCount();
        
        adapter.addMessage(newMessage);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å
        assertEquals(initialCount + 1, adapter.getItemCount());
        assertTrue(testMessages.contains(newMessage));
    }

    @Test
    public void addMessage_WithNullMessage_HandlesGracefully() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É null —Å–æ–æ–±—â–µ–Ω–∏—è
        int initialCount = adapter.getItemCount();
        
        try {
            adapter.addMessage(null);
            // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–∞–∑–º–µ—Ä –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
            assertEquals(initialCount, adapter.getItemCount());
        } catch (Exception e) {
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —ç—Ç–æ —Ç–æ–∂–µ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            assertTrue("Exception should be handled gracefully", true);
        }
    }

    @Test
    public void addMessage_MultipleMessages_AddsAllMessages() {
        // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –≤ –∞–¥–∞–ø—Ç–µ—Ä
        Message message1 = new Message("User1", "Message 1");
        Message message2 = new Message("User2", "Message 2");
        Message message3 = new Message("User3", "Message 3");
        
        adapter.addMessage(message1);
        adapter.addMessage(message2);
        adapter.addMessage(message3);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã
        assertEquals(3, adapter.getItemCount());
        assertTrue(testMessages.contains(message1));
        assertTrue(testMessages.contains(message2));
        assertTrue(testMessages.contains(message3));
    }

    @Test
    public void addMessage_WithEmptyText_AddsMessage() {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º
        Message emptyMessage = new Message("User", "");
        
        adapter.addMessage(emptyMessage);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—É—Å—Ç—ã–º —Ç–µ–∫—Å—Ç–æ–º –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
        assertEquals(1, adapter.getItemCount());
        assertTrue(testMessages.contains(emptyMessage));
    }

    @Test
    public void addMessage_WithNullSender_AddsMessage() {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å null –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
        Message nullSenderMessage = new Message(null, "Message text");
        
        adapter.addMessage(nullSenderMessage);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å null –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
        assertEquals(1, adapter.getItemCount());
        assertTrue(testMessages.contains(nullSenderMessage));
    }

    @Test
    public void addMessage_WithLongText_AddsMessage() {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–ª–∏–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        String longText = "–≠—Ç–æ –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ " +
            "–∏ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –∞–¥–∞–ø—Ç–µ—Ä –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. " +
            "–°–æ–æ–±—â–µ–Ω–∏–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∏ –¥–∞–∂–µ –∞–±–∑–∞—Ü–µ–≤ —Ç–µ–∫—Å—Ç–∞.";
        Message longMessage = new Message("User", longText);

        adapter.addMessage(longMessage);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        assertEquals(1, adapter.getItemCount());
        assertTrue(testMessages.contains(longMessage));
    }

    @Test
    public void addMessage_WithSpecialCharacters_AddsMessage() {
        // –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏
        String specialText = "–°–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏ üéâ –∏ —Å–∏–º–≤–æ–ª–∞–º–∏ @#$%^&*()";
        Message specialMessage = new Message("User", specialText);

        adapter.addMessage(specialMessage);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º–∏ —Å–∏–º–≤–æ–ª–∞–º–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è
        assertEquals(1, adapter.getItemCount());
        assertTrue(testMessages.contains(specialMessage));
    }

    @Test
    public void constructor_WithNullList_HandlesGracefully() {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É null —Å–ø–∏—Å–∫–∞ –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ
        try {
            new com.example.first_project.adapter.MessageAdapter(null);
            // –ï—Å–ª–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –Ω–µ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —ç—Ç–æ –ø—Ä–∏–µ–º–ª–µ–º–æ
            assertTrue("Constructor should handle null list gracefully", true);
        } catch (Exception e) {
            // –ï—Å–ª–∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, —ç—Ç–æ —Ç–æ–∂–µ –ø—Ä–∏–µ–º–ª–µ–º–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
            assertTrue("Exception should be handled gracefully", true);
        }
    }

    @Test
    public void getItemCount_AfterAddingAndRemoving_ReturnsCorrectCount() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∑–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –æ–¥–Ω–æ –∏–∑ –Ω–∏—Ö
        Message message1 = new Message("User1", "Message 1");
        Message message2 = new Message("User2", "Message 2");

        adapter.addMessage(message1);
        adapter.addMessage(message2);
        assertEquals(2, adapter.getItemCount());
        
        testMessages.remove(message1);
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –∞–¥–∞–ø—Ç–µ—Ä–µ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –≤—ã–∑–≤–∞—Ç—å notifyDataSetChanged()

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
        assertEquals(1, testMessages.size());
    }
}
